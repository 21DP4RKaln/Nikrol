generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  phone               String?
  role                Role                 @default(USER)
  isBlocked           Boolean              @default(false)
  blockReason         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  profileImageUrl     String?
  accounts            Account[]
  auditLogs           AuditLog[]
  friendRequests      Friendship[]         @relation("FriendRequests")
  friendships         Friendship[]         @relation("UserFriendships")
  movies              Movie[]
  passwordResetTokens PasswordResetToken[]
  sessions            Session[]
  userMediaEntries    UserMediaEntry[]

  @@map("user")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entityType String
  entityId   String   @default("")
  details    String
  ipAddress  String?  @default("")
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@map("audit_log")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "account_user_fk")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "session_user_fk")

  @@index([userId])
  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  code      String
  type      String
  contact   String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "password_reset_token_user_fk")

  @@index([userId])
  @@map("password_reset_tokens")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model GlobalMedia {
  id               String           @id @default(uuid())
  imdbId           String           @unique
  title            String
  originalTitle    String?
  description      String?
  releaseYear      Int?
  genres           String?
  director         String?
  cast             String?
  posterUrl        String?
  backdropUrl      String?
  type             MediaType        @default(MOVIE)
  imdbRating       Float?
  duration         Int?
  countries        String?
  languages        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userMediaEntries UserMediaEntry[]

  @@index([imdbId])
  @@index([type])
  @@index([title])
  @@index([releaseYear])
  @@map("global_media")
}

model UserMediaEntry {
  id              String            @id @default(uuid())
  userId          String
  globalMediaId   String
  status          WatchStatus       @default(WANT_TO_WATCH)
  userRating      Float?
  personalNotes   String?
  watchedAt       DateTime?
  startedAt       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  episodeProgress EpisodeProgress[]
  globalMedia     GlobalMedia       @relation(fields: [globalMediaId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, globalMediaId])
  @@index([userId])
  @@index([globalMediaId])
  @@map("user_media_entries")
}

model EpisodeProgress {
  id               String         @id @default(uuid())
  userMediaEntryId String
  season           Int
  episode          Int
  watched          Boolean        @default(false)
  watchedAt        DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userMediaEntry   UserMediaEntry @relation(fields: [userMediaEntryId], references: [id], onDelete: Cascade)

  @@unique([userMediaEntryId, season, episode])
  @@index([userMediaEntryId])
  @@map("episode_progress")
}

model Movie {
  id          String    @id @default(uuid())
  title       String
  description String?
  releaseYear Int?
  genre       String?
  director    String?
  posterUrl   String?
  type        MediaType @default(MOVIE)
  rating      Float?
  duration    Int?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([genre])
  @@map("movies")
}

model Friendship {
  id        String           @id @default(uuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  friend    User             @relation("FriendRequests", fields: [friendId], references: [id], onDelete: Cascade)
  user      User             @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@map("friendships")
}

enum MediaType {
  MOVIE
  TV_SERIES
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum WatchStatus {
  WANT_TO_WATCH
  WATCHING
  WATCHED
  ON_HOLD
  DROPPED
  REWATCHING
}

enum Role {
  USER
  ADMIN
}
